package com.modarcsoft.app.security;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.csrf.CsrfTokenRepository;
import org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	DataSource dataSource;

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.csrf().disable();

		// login olmadan çalışacak dosyalar
		http.authorizeRequests()
			.antMatchers("/css/**", "/js/**", "/custom/**", "/img/**", "/scss/**", "/lib/**")
			.permitAll();
		http.authorizeRequests()
			.anyRequest()
			.authenticated();

		// login sayfasına yönlendirme
		http.formLogin().loginPage("/login")
				.loginProcessingUrl("/login")
				.defaultSuccessUrl("/index", true)
				.usernameParameter("kullaniciadi")
				.passwordParameter("sifre")
				.permitAll();

		// logout
		http.logout().logoutSuccessUrl("/login").permitAll();

		// beni hatırla
		// http.rememberMe().userDetailsService(userDetailsService).and().httpBasic();

	}

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.jdbcAuthentication().dataSource(dataSource)
				.usersByUsernameQuery("SELECT kullaniciadi, sifre, 'true' as enabled from kullanicilar where sifre = ?")
				.authoritiesByUsernameQuery("SELECT k.kullaniciadi, r.rol " 
						+ "FROM roller r, kullanicilar k "
						+ "WHERE k.kullaniciadi = ? " 
						+ "AND k.id = r.rol_id")
				.passwordEncoder(passwordEncoder());
		
	}
	

	 @Bean
	    public PasswordEncoder passwordEncoder() {
	        return new BCryptPasswordEncoder();
	    }
	
}
